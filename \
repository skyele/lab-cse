#include "datanode.h"
#include <arpa/inet.h>
#include "extent_client.h"
#include <unistd.h>
#include <algorithm>
#include "threader.h"

using namespace std;

int DataNode::init(const string &extent_dst, const string &namenode, const struct sockaddr_in *bindaddr) {
  ec = new extent_client(extent_dst);
  // Generate ID based on listen address
  id.set_ipaddr(inet_ntoa(bindaddr->sin_addr));
  id.set_hostname(GetHostname());
  id.set_datanodeuuid(GenerateUUID());
  id.set_xferport(ntohs(bindaddr->sin_port));
  id.set_infoport(0);
  id.set_ipcport(0);

	cout<<"the host name is "<<GetHostname()<<endl;//just test
	fflush(stdout);//just test

  // Save namenode address and connect
  make_sockaddr(namenode.c_str(), &namenode_addr);
  if (!ConnectToNN()) {
	printf("datanode error 1\n");//just test
	fflush(stdout);//just test
    delete ec;
    ec = NULL;
    return -1;
  }

  // Register on namenode
  if (!RegisterOnNamenode()) {
	printf("datanode error 2\n");//just test
	fflush(stdout);//just test

    delete ec;
    ec = NULL;
    close(namenode_conn);
    namenode_conn = -1;
    return -1;
  }
  /* Add your initialization here */
	NewThread(this,&DataNode::InvokeSendHeartBeat,0);

	printf("finish datanode init\n");//just test
	printf("hello from the outside\n");//just test
	fflush(stdout);//just test
  return 0;
}

bool DataNode::ReadBlock(blockid_t bid, uint64_t offset, uint64_t len, string &buf) {
  /* Your lab4 part 2 code */
	cout<<"in DataNode::ReadBlock"<<endl;//just test
	fflush(stdout);//just test
	string raw;
	ec->read_block(bid,raw);
	if(offset >= BLOCK_SIZE){
		buf = "";
		return false;
	}
	buf = raw.substr(offset,len);
	return true;
}

bool DataNode::WriteBlock(blockid_t bid, uint64_t offset, uint64_t len, const string &buf) {
  /* Your lab4 part 2 code */
	cout<<"in DataNode::WriteBlock"<<endl;//just test
	fflush(stdout);//just test
	if(offset >= BLOCK_SIZE)
		return false;
	string raw;
	ec->read_block(bid,raw);
	
	if(offset+len >= BLOCK_SIZE)
		raw = raw.substr(0,offset) + buf.substr(0,len);
	else
		raw = raw.substr(0,offset) + buf.substr(0,len) + raw.substr(offset+len);
	raw = raw.substr(0,BLOCK_SIZE);
	ec->write_block(bid,raw);
	return true;
}

void DataNode::InvokeSendHeartBeat(int r){
	cout<<"in DataNode::InvokeSendHeartBeat"<<endl;//just test
	fflush(stdout);//just test
	while(true){
		if(SendHeartbeat() == 0){
			printf("there is an error in send heart beat\n");//just test
			fflush(stdout);//just test
			return;
		}
		printf("in while infinit loop\n");//just test
		fflush(stdout);//just test
		sleep(1);
	}
}
